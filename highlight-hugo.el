;;; highlight-hugo.el --- Syntax highlight Hugo code blocks -*- lexical-binding: t; -*-
;;
;; Author:  Fernando García Liñán <contact@fgarlin.com>
;; URL:     https://github.com/fgarlin/highlight-hugo
;;
;;; License:
;;
;; This file is part of highlight-hugo, which is not part of GNU Emacs.
;; SPDX-License-Identifier: GPL-3.0-or-later
;;
;;; Commentary:
;;
;; Take a website generated by Hugo (https://gohugo.io/) and apply syntax
;; highlighting to all code blocks found in the generated HTML files, leveraging
;; Emacs major modes and font locking.
;;
;;; Code:

(require 'highlight-html)

(defmacro highlight-hugo-measure-time (&rest body)
  "Measure and return the running time of the code block BODY, in seconds.
https://nullprogram.com/blog/2009/05/28/"
  (declare (indent defun))
  (let ((start (make-symbol "start")))
    `(let ((,start (float-time)))
       ,@body
       (- (float-time) ,start))))

(defun highlight-hugo-replace-next-code-block ()
  "Apply syntax highlighting to the next HTML code block.
This function expects that the point is positioned before a code
block of the form:

<code class=\"language-c++\">
  ...
</code>

Syntax highlighting will be applied to the content inside the
<code> tags. If the \"class\" attribute is not present, no syntax
highlighting will be applied."
  (let (p1 p2 lang)
    (setq p1 (re-search-forward
              (rx "<code class="
                  (? (any "\"" "'")) ; Match double and single quotes if present
                  "language-"
                  (group (+ (not (any ">" "\"" "'"))))
                  ">")
              nil t))
    (when p1
      (setq lang (match-string 1))
      (setq p2 (search-forward "</code>"))
      (setq p2 (- p2 7))
      (goto-char p2)
      (highlight-html-replace-in-region p1 p2 lang))))

;;;###autoload
(defun highlight-hugo-replace-in-current-buffer ()
  "Apply syntax highlighting to all code blocks in the current buffer.
The buffer should be a HTML file generated by Hugo. Return the number of
code blocks that have been replaced."
  (interactive)
  (let ((count 0))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "<pre>" nil t)
        (highlight-hugo-replace-next-code-block)
        (search-forward "</pre>")
        (setq count (1+ count)))
      (when (called-interactively-p 'any)
        (message "Replaced %d code block(s)" count))
      count)))

;;;###autoload
(defun highlight-hugo-replace-in-file (file)
  "Apply syntax highlighting to a HTML FILE generated by Hugo."
  (interactive (list (read-file-name "Highlight Hugo HTML file: " nil nil t)))
  (let (replacement-count)
    (find-file file)
    (setq replacement-count (highlight-hugo-replace-in-current-buffer))
    (save-buffer)
    (kill-buffer (current-buffer))
    (when (> replacement-count 0)
      (message "Replaced %d code block(s) in file %s" replacement-count file))
    replacement-count))

;;;###autoload
(defun highlight-hugo-replace-in-publish-directory (hugo-publish-dir)
  "Apply syntax highlighting to all suitable files in a directory HUGO-PUBLISH-DIR.
The directory will be traversed recursively and all code blocks
in files named index.html will be highlighted. HUGO-PUBLISH-DIR
is usually the path to the public/ directory generated by Hugo.
Return the total count of replaced code blocks."
  (interactive (list (read-directory-name "Hugo publish directory: " nil nil t)))
  (let (total-replacement-count execution-time)
    (setq execution-time (highlight-hugo-measure-time
                          (setq total-replacement-count
                                (apply '+ (mapcar #'highlight-hugo-replace-in-file
                                                  (directory-files-recursively
                                                   hugo-publish-dir
                                                   "index\\.html"))))))
    (message "Replaced %d code block(s) in %f seconds in directory: %s"
             total-replacement-count execution-time hugo-publish-dir)
    total-replacement-count))

(provide 'highlight-hugo)

;;; highlight-hugo.el ends here
